(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../src/modules/move-element/move-element.core.js":
/*!********************************************************!*\
  !*** ../src/modules/move-element/move-element.core.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n(function ($) {\n  var FP_MOVE_ELEMENT = 'fp.move.element';\n  /**\n   *\n   * @param $element\n   * @param $options\n   * @returns {FpMoveElement}\n   * @constructor\n   */\n\n  function FpMoveElement($element, $options) {\n    var $this = this;\n    $this.element = $($element);\n    $this.options = $.extend($this.options, FpMoveElement.prototype.DEFAULTS, $options);\n    var $orderElements = $($this.element).find($this.options.moveElement);\n\n    if ($orderElements.length) {\n      var $dataIndex = 0;\n\n      var _iterator = _createForOfIteratorHelper($orderElements),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var $e = _step.value;\n          $($e).attr('data-index', $dataIndex++);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    $this.order = $orderElements.length > 0;\n    $this.totalChilds = $this.order ? $orderElements.length : 0;\n    $this.init();\n    return $this;\n  }\n  /**\n   *\n   * @type {{moveElement: string}}\n   */\n\n\n  FpMoveElement.prototype.DEFAULTS = {\n    targetEvent: '[data-target]',\n    moveElement: null,\n    appendClass: 'moved',\n    maxElementMoved: 0\n  };\n\n  FpMoveElement.prototype.init = function () {\n    var $this = this;\n    $this.addEventListeners();\n  };\n\n  FpMoveElement.prototype.addEventListeners = function () {\n    var _$this$options$target;\n\n    var $this = this;\n    var $targetEvent = (_$this$options$target = $this.options.targetEvent) !== null && _$this$options$target !== void 0 ? _$this$options$target : $this.options.moveElement;\n    $($this.element).find($targetEvent).on('click', function ($event) {\n      $this.click($event);\n    });\n  };\n\n  FpMoveElement.prototype.click = function ($event) {\n    $event.preventDefault();\n    var $this = this;\n    var $target = $($event.currentTarget);\n    var $elementForMoved = $this.options.moveElement && $this.options.moveElement !== $this.options.targetEvent ? $target.closest($this.options.moveElement) : $target;\n    var $moved = eval($elementForMoved.attr('data-element-moved'));\n\n    if ($this.options.maxElementMoved > 0 && !$moved && $($this.element).find('[data-element-moved=true]').length === $this.options.maxElementMoved) {\n      return;\n    }\n\n    if (!$moved) {\n      $elementForMoved.attr('data-element-moved', true);\n      $this.element.prepend($elementForMoved);\n    }\n\n    if ($moved) {\n      $elementForMoved.attr('data-element-moved', false);\n\n      if ($this.order) {\n        var $orderNumber = $elementForMoved.data('index');\n\n        if ($this.totalChilds - 1 > $orderNumber) {\n          var $indexElements = $($this.element).find('[data-index]:not([data-element-moved=true])');\n          var $position = $this.totalChilds;\n\n          var _iterator2 = _createForOfIteratorHelper($indexElements),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var $el = _step2.value;\n              var $orderIndex = $($el).data('index');\n\n              if ($orderNumber < $orderIndex) {\n                break;\n              }\n\n              $position = $orderIndex;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          $elementForMoved.insertAfter($this.element.find(\"[data-index=\".concat($position, \"]\")));\n        } else {\n          $elementForMoved.appendTo($this.element);\n        }\n      }\n\n      if (!$this.order) {\n        $elementForMoved.appendTo($this.element);\n      }\n    }\n\n    if ($this.options.appendClass) {\n      $elementForMoved.toggleClass($this.options.appendClass);\n    }\n  };\n  /**\n   *\n   * @param $opts\n   * @returns {Window.jQuery|*|jQuery|HTMLElement}\n   */\n\n\n  $.fn.moveElement = function ($opts) {\n    var _$instance;\n\n    if ($opts.moveElement === undefined || !$opts.moveElement) {\n      $.error(\"Not found 'moveElement' setting!\");\n    }\n\n    var $this = $(this);\n\n    if (!$this.length) {\n      return $this;\n    }\n\n    var $typeofOpts = _typeof($opts) === 'object';\n    var $instance = $this.data(FP_MOVE_ELEMENT);\n\n    if ($typeofOpts || !$opts) {\n      $instance = new FpMoveElement($this, $opts);\n      $this.data(FP_MOVE_ELEMENT, $instance);\n      return this;\n    }\n\n    if (!$instance) {\n      $.error(\"Plugin must be initialised before using method: \".concat($opts));\n    }\n\n    if (!$typeofOpts && $opts.indexOf('_') === 0) {\n      $.error(\"Method \".concat(opts, \" is private!\"));\n    }\n\n    if ($instance && !($opts in $instance)) {\n      $.error(\"Method \".concat($opts, \" does not exist!\"));\n    }\n\n    var args = Array.prototype.slice.call(arguments, 1);\n    return (_$instance = $instance)[$opts].apply(_$instance, _toConsumableArray(args));\n  };\n})(window.jQuery);\n\n//# sourceURL=webpack:///../src/modules/move-element/move-element.core.js?");

/***/ })

}]);