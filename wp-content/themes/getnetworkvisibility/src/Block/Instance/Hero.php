<?php

namespace FINNPartners\Theme\Block\Instance;

use FINNPartners\Theme\Block\Instance\Fields\HeroFields;
use FINNPartners\Theme\Theme;
use WpAdvanceCustomFieldsExtend\AbstractClass\Block;
use WpAdvanceCustomFieldsExtend\Service\Media;

class Hero extends Block
{

    /**
     * @var HeroFields
     */
    private $fields;

    /**
     * @var bool
     */
    private $hasBox = null;

    /**
     * @var string
     */
    private $crop = Theme::IMAGE_SIZES['hero']['name'];

    /**
     * @var bool
     */
    private $sampleHero = false;

    /**
     * @param int|false $postId
     * @param array $block
     * @param bool $isPreview
     * @return void
     */
    public function __construct($postId = false, array $block = [], bool $isPreview = false)
    {
        $this->setFields(new HeroFields($postId, !empty($block['id']) ? $block['id'] : false));

        parent::__construct($block);

        $this->setIsPreview($isPreview)->execute();
    }

    public function execute(): Block
    {
        $cssClasses = is_array($this->getCSSClasses()) ? $this->getCSSClasses() : [];
        $this->setSampleHero(in_array('is-style-sample', $cssClasses));
        $this->setCrop($this->isBox() ? Theme::IMAGE_SIZES['hero_tall']['name'] : Theme::IMAGE_SIZES['hero']['name']);

        if (($this->getFields()->getBackgroundImage() instanceof Media)) {
            $this->getFields()->getBackgroundImage()->setCrop($this->getCrop());
        }

        if (empty($this->getFields()->getHeading())) {
            $this->getFields()->setHeading(get_the_title($this->getFields()->getPostId()));
        }

        return parent::execute(); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     */
    public function isBox(): bool
    {
        if (is_null($this->hasBox)) {
            $this->setBox($this->getFields()->isAddCustomBox());
        }

        return $this->hasBox;
    }

    /**
     * @param bool $hasBox
     */
    public function setBox(bool $hasBox): void
    {
        $this->hasBox = $hasBox;
    }

    /**
     * @return HeroFields
     */
    public function getFields(): HeroFields
    {
        return $this->fields;
    }

    /**
     * @param HeroFields $fields
     * @return $this
     */
    protected function setFields(HeroFields $fields): self
    {
        $this->fields = $fields;

        return $this;
    }

    /**
     * @return mixed|string
     */
    public function getCrop()
    {
        return $this->crop;
    }

    /**
     * @param mixed|string $crop
     * @return Hero
     */
    public function setCrop($crop)
    {
        $this->crop = $crop;
        return $this;
    }

    /**
     * @return bool
     */
    public function isSampleHero(): bool
    {
        return $this->sampleHero;
    }

    /**
     * @param bool $sampleHero
     * @return Hero
     */
    public function setSampleHero(bool $sampleHero): Hero
    {
        $this->sampleHero = $sampleHero;
        return $this;
    }
}