<?php

namespace FINNPartners\Theme\Block\Instance;

use FINNPartners\Theme\Block\Instance\Fields\MoreSolutionIndustryFields;
use FINNPartners\Theme\PostType\Instance\Solution as SolutionInstance;
use FINNPartners\Theme\PostType\Instance\Industry as IndustryInstance;
use FINNPartners\Theme\PostType\Register\Industry;
use FINNPartners\Theme\PostType\Register\Solution;
use FINNPartners\Theme\Theme;
use WP_Query;
use WpAdvanceCustomFieldsExtend\AbstractClass\Block;
use WpAdvanceCustomFieldsExtend\Service\Media;
use WpAdvanceCustomFieldsExtend\Service\Post2PostHelper;
use WpAdvanceCustomFieldsExtend\Service\QueryHelper;

class MoreSolutionIndustry extends Block
{

    /**
     * @var MoreSolutionIndustryFields
     */
    private $fields;

    /**
     * @var array[]|false
     */
    private $articles = null;

    /**
     * @param int|false $postId
     * @param array $block
     * @param bool $isPreview
     * @return void
     */
    public function __construct($postId = false, array $block = [], bool $isPreview = false)
    {
        $this->setFields(new MoreSolutionIndustryFields($postId, !empty($block['id']) ? $block['id'] : false));

        parent::__construct($block);

        $this->setIsPreview($isPreview)->execute();
    }

    public function previewNotAvailableHTML(): void
    {
        if (!$this->getArticles()) {
            parent::previewNotAvailableHTML(); // TODO: Change the autogenerated stub
        }
    }

    /**
     * @return array[]|false
     */
    public function getArticles()
    {
        if (is_null($this->articles)) {
            $articles = false;

            if ($this->getFields()->getDataSource()) {
                /** @var QueryHelper $queryHelper */
                $queryHelper = new QueryHelper();
                /** @var bool $isQuery */
                $isQuery = false;

                switch ($this->getFields()->getDataSource()) {
                    case MoreSolutionIndustryFields::DATASOURCE_MANUAL_VALUE:
                        $articles = $this->getFields()->getRelaters();
                        if ($this->getFields()->isIndustry() && !$this->getFields()->isSolution()) {
                            $articles = $this->getFields()->getIndustries();
                        }
                        if (!$this->getFields()->isIndustry() && $this->getFields()->isSolution()) {
                            $articles = $this->getFields()->getSolutions();
                        }
                        $isQuery = !empty($articles);

                        if ($isQuery) {
                            $queryHelper->setArgs([
                                'post_type' => !empty($this->getFields()->getDataPost()) ? $this->getFields()->getDataPost() : [Industry::POST_TYPE, Solution::POST_TYPE],
                                'post_status' => ['publish'],
                                'posts_per_page' => count($articles),
                                'post__in' => $articles,
                                'fields' => 'ids',
                                'orderby' => ['post__in', 'asc'],
                            ]);
                        }
                        break;
                    case MoreSolutionIndustryFields::DATASOURCE_CONNECT_TO_CURRENT_POST_VALUE:
                        $dataPosts = !empty($this->getFields()->getDataPost()) ? $this->getFields()->getDataPost() : [Industry::POST_TYPE, Solution::POST_TYPE];
                        $postIds = [];

                        foreach ($dataPosts as $postType) {
                            /** @var Post2PostHelper $Post2PostHelper */
                            $Post2PostHelper = Post2PostHelper::getInstances($postType);
                            $posts = $Post2PostHelper ? $Post2PostHelper->getPostsLinked() : false;

                            if (!empty($posts)) {
                                $postIds = array_merge($postIds, $posts);
                            }
                        }

                        $isQuery = !empty($postIds);

                        if ($isQuery) {
                            $queryHelper->setArgs([
                                'post_type' => $dataPosts,
                                'post_status' => ['publish'],
                                'post__in' => $postIds,
                                'post__not_in' => [$this->getFields()->getPostId()],
                                'posts_per_page' => $this->getFields()->getLimit(),
                                'fields' => 'ids',
                                'orderby' => ['post__in' => 'asc'],
                            ]);
                        }
                        break;
                    default:
                        $dataPosts = !empty($this->getFields()->getDataPost()) ? $this->getFields()->getDataPost() : [Industry::POST_TYPE, Solution::POST_TYPE];
                        $queryHelper->setArgs([
                            'post_type' => $dataPosts,
                            'post_status' => ['publish'],
                            'post__not_in' => [$this->getFields()->getPostId()],
                            'posts_per_page' => $this->getFields()->getLimit(),
                            'fields' => 'ids',
                        ]);
                        $isQuery=true;
                        break;
                }

                if ($isQuery) {
                    $articles = new WP_Query($queryHelper->getArgs());
                    $articles = $articles->have_posts() ? $articles->get_posts() : false;

                    if ($articles) {
                        foreach ($articles as &$article) {
                            /** @var int $article */
                            $article = get_post_type($article) === Industry::POST_TYPE ? new IndustryInstance($article) : new SolutionInstance($article);
                            /** @var IndustryInstance|SolutionInstance $article */

                            if (($article->getFields()->getThumbnail() instanceof Media)) {
                                $article->getFields()->getThumbnail()->setCrop(Theme::IMAGE_SIZES['highlighted_resources_list']['name']);
                            }
                        }
                    }
                }
            }

            $this->setArticles($articles);
        }
        return $this->articles;
    }

    /**
     * @param array[]|false $articles
     * @return MoreSolutionIndustry
     */
    public function setArticles($articles)
    {
        $this->articles = $articles;
        return $this;
    }

    /**
     * @return MoreSolutionIndustryFields
     */
    public function getFields(): MoreSolutionIndustryFields
    {
        return $this->fields;
    }

    /**
     * @param MoreSolutionIndustryFields $fields
     * @return $this
     */
    protected function setFields(MoreSolutionIndustryFields $fields): self
    {
        $this->fields = $fields;

        return $this;
    }
}