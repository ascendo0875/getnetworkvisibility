<?php

namespace FINNPartners\Theme\Block\Instance;

use FINNPartners\Theme\Api\Event as ApiEvent;
use FINNPartners\Theme\Block\Instance\Fields\EventsArchiveFields;
use FINNPartners\Theme\Service\ThemeCacheHelper;
use FINNPartners\Theme\Taxonomy\Region;
use FINNPartners\Theme\Theme;
use WP_Term;
use WpAdvanceCustomFieldsExtend\AbstractClass\Block;
use WpAdvanceCustomFieldsExtend\Service\React;
use WpAdvanceCustomFieldsExtend\Service\TaxonomyHelper;
use FINNPartners\Theme\PostType\Register\Event as EventRegister;

class EventsArchive extends Block
{
    /**
     * @var EventsArchiveFields
     */
    private $fields;

    /**
     * @param int|false $postId
     * @param array $block
     * @param bool $isPreview
     * @return void
     */
    public function __construct($postId = false, array $block = [], bool $isPreview = false)
    {
        $this->setFields(new EventsArchiveFields($postId, !empty($block['id']) ? $block['id'] : false));

        parent::__construct($block);

        $this
            ->setIsPreview($isPreview)
            ->execute();

    }

    /**
     * @return Block
     */
    public function execute(): Block
    {
        /** @var React $React */
        $React = React::getInstance($this->getBlockId(), [
            'php' => getTheme()->getPath() . "templates/src/modules/list/build/list.build.asset.php",
            'js' => getTheme()->getPathUrl() . "templates/src/modules/list/build/list.build.js"
        ]);
        $React->setApp('Events')
            ->addData('source', ApiEvent::url())
            ->addData('loadMore', 'pagination')
            ->addData('maxFiltersDisplay', 6)
            ->addData('filtersShowMore', true)
            ->addText('textFilterShowMore', 'Show More')
            ->addText('textFilterShowLess', 'Show Less')
            ->addText('textSearchLabel', 'type a keyword')
            ->addText('textButtonSearchLabel', 'search')
            ->addText('textFilterLabel', 'filter ')
            ->addText('textClearAllLabel', 'clear all')
            ->addText('textUpcomingLabel', 'Upcoming ' . EventRegister::PLURAL_NAME)
            ->addText('textPastLabel', 'Past ' . EventRegister::PLURAL_NAME)
            ->addText('textPastLabelHeading', 'Past ' . EventRegister::PLURAL_NAME)
            ->addText('textUpcomingLabelHeading', 'Upcoming ' . EventRegister::PLURAL_NAME)
            ->addText('textUpcomingNothingHere', $this->getFields()->getTheMessageIfThereAreNoUpcomingEvents() ?? '')
            ->addText('textPastNothingHere', $this->getFields()->getTheMessageIfThereAreNoPastEvents() ?? '')
            ->addText('textShowNumberResults', 'show (%countResults%) results');

        $filters[ApiEvent::FILTER_TYPE_VAR] = [
            'key' => ApiEvent::FILTER_TYPE_VAR,
            'default' => (isset($_REQUEST[ApiEvent::FILTER_TYPE_VAR]) && !empty(trim($_REQUEST[ApiEvent::FILTER_TYPE_VAR]))) ? esc_sql($_REQUEST[ApiEvent::FILTER_TYPE_VAR]) : false,
        ];

        /** @var TaxonomyHelper $taxonomyHelper */
        $taxonomyHelper = TaxonomyHelper::getHelper();
        $regions = Theme::getCachePage()->get(ThemeCacheHelper::APP_POST, "events-" . Region::TAXONOMY_NAME, function () use ($taxonomyHelper) {
            $regions = $taxonomyHelper->getTermsAssignedToPostType(Region::TAXONOMY_NAME, EventRegister::POST_TYPE);
            $regions = !empty($regions) ? $regions : false;
            if ($regions) {
                foreach ($regions as &$term) {
                    /** @var WP_Term $term */
                    $term = ['label' => ucfirst($term->name), 'value' => $term->slug];
                }

                $regions = wp_list_sort($regions, 'label');
            }

            return $regions;
        });

        $filters[Region::TAXONOMY_NAME] = [
            'key' => Region::TAXONOMY_NAME,
            'element' => 'Input',
            'type' => 'checkbox',
            'default' => !empty($_GET[Region::TAXONOMY_NAME]) ? $_GET[Region::TAXONOMY_NAME] : false,
            'label' => Region::PLURAL_NAME,
            'choices' => $regions ?: [],
            'isVisible' => false,
        ];

        $React->addData('filters', $filters);
        $React->render();

        return parent::execute(); // TODO: Change the autogenerated stub
    }

    /**
     * @return EventsArchiveFields
     */
    public function getFields(): EventsArchiveFields
    {
        return $this->fields;
    }

    /**
     * @param EventsArchiveFields $fields
     * @return $this
     */
    protected function setFields(EventsArchiveFields $fields): self
    {
        $this->fields = $fields;

        return $this;
    }

}