<?php

namespace FINNPartners\Theme\Block\Instance;

use FINNPartners\Theme\Block\Instance\Fields\HighlightedResourcesListFields;
use FINNPartners\Theme\Block\Instance\Fields\ResourcesListFields;
use FINNPartners\Theme\PostType\Instance\Resource;
use FINNPartners\Theme\PostType\Register\Resource as PostTypeResource;
use FINNPartners\Theme\Taxonomy\Keyword;
use FINNPartners\Theme\Taxonomy\Market;
use FINNPartners\Theme\Taxonomy\Product;
use FINNPartners\Theme\Taxonomy\Solution;
use FINNPartners\Theme\Taxonomy\Topic;
use FINNPartners\Theme\Taxonomy\Type;
use FINNPartners\Theme\Theme;
use WP_Query;
use WpAdvanceCustomFieldsExtend\AbstractClass\Block;
use WpAdvanceCustomFieldsExtend\Service\Media;
use WpAdvanceCustomFieldsExtend\Service\Post2PostHelper;
use WpAdvanceCustomFieldsExtend\Service\QueryHelper;

class HighlightedResourcesList extends Block
{

    /**
     * @var HighlightedResourcesListFields
     */
    private $fields;

    /**
     * @var Resource|false
     */
    private $highlightedResource = null;

    /**
     * @var Resource[]|false
     */
    private $resources = null;

    /**
     * @param int|false $postId
     * @param array $block
     * @param bool $isPreview
     * @return void
     */
    public function __construct($postId = false, array $block = [], bool $isPreview = false)
    {
        $this->setFields(new HighlightedResourcesListFields($postId, !empty($block['id']) ? $block['id'] : false));

        parent::__construct($block);

        $this->setIsPreview($isPreview)->execute();
    }

    public function execute(): Block
    {
        if($this->getFields()->isDisplayExcerpt()) {
            $this->addCSSClass('show-excerpt');
        }

        return parent::execute(); // TODO: Change the autogenerated stub
    }

    public function previewNotAvailableHTML(): void
    {
        if(!$this->getResources() && !$this->getHighlightedResource()) {
            parent::previewNotAvailableHTML(); // TODO: Change the autogenerated stub
        }
    }

    /**
     * @return false|Resource
     */
    public function getHighlightedResource()
    {
        if (is_null($this->highlightedResource)) {
            $highlightedResource = false;

            if (!empty($this->getResources())) {
                $resources = $this->getResources();
                $highlightedResource = array_shift($resources);
                $this->setResources($resources);

                if ($highlightedResource->getFields()->getThumbnail() instanceof Media) {
                    $highlightedResource->getFields()->getThumbnail()->setCrop(Theme::IMAGE_SIZES['highlighted_resource']['name']);
                }
            }

            $this->setHighlightedResource($highlightedResource);
        }

        return $this->highlightedResource;
    }

    /**
     * @param false|Resource $highlightedResource
     * @return HighlightedResourcesList
     */
    public function setHighlightedResource($highlightedResource)
    {
        $this->highlightedResource = $highlightedResource;
        return $this;
    }

    /**
     * @return false|Resource[]
     */
    public function getResources()
    {
        if (is_null($this->resources)) {
            $resources = false;

            if ($this->getFields()->getDataSource()) {
                $queryHelper = new QueryHelper();
                $isQuery = false;

                switch ($this->getFields()->getDataSource()) {
                    case HighlightedResourcesListFields::DATASOURCE_MANUAL_VALUE:
                        $isQuery = !empty($this->getFields()->getResources());

                        if ($isQuery) {
                            $queryHelper->setArgs([
                                'post_type' => [PostTypeResource::POST_TYPE],
                                'post_status' => ['publish'],
                                'posts_per_page' => count($this->getFields()->getResources()),
                                'fields' => 'ids',
                                'post__in' => $this->getFields()->getResources(),
                                'orderby' => ['post__in' => 'asc'],
                            ]);
                        }
                        break;
                    case HighlightedResourcesListFields::DATASOURCE_CONNECT_TO_CURRENT_POST_VALUE:
                        $Post2PostHelper = Post2PostHelper::getInstances(PostTypeResource::POST_TYPE);
                        $posts = $Post2PostHelper ? $Post2PostHelper->getPostsLinked() : false;
                        $isQuery = !empty($posts);

                        if($isQuery) {
                            $queryHelper->setArgs([
                                'post_type' => [PostTypeResource::POST_TYPE],
                                'post_status' => ['publish'],
                                'post__not_in' => [$this->getFields()->getPostId()],
                                'post__in' => $posts,
                                'posts_per_page' => $this->getFields()->getLimit(),
                                'fields' => 'ids',
                                'orderby' => ['post__in' => 'asc'],
                            ]);
                        }
                        break;
                    default:
                        $isQuery = true;

                        $queryHelper->setArgs([
                            'post_type' => [PostTypeResource::POST_TYPE],
                            'post_status' => ['publish'],
                            'post__not_in' => [$this->getFields()->getPostId()],
                            'posts_per_page' => $this->getFields()->getLimit(),
                            'fields' => 'ids',
                        ]);

                        if (!empty($this->getFields()->getKeywordsTaxonomy())) {
                            $queryHelper->addTaxQuery(Keyword::TAXONOMY_NAME, $this->getFields()->getKeywordsTaxonomy());
                        }

                        if (!empty($this->getFields()->getTypesTaxonomy())) {
                            $queryHelper->addTaxQuery(Type::TAXONOMY_NAME, $this->getFields()->getTypesTaxonomy());
                        }
                        break;
                }

                if ($isQuery) {
                    $resources = new WP_Query($queryHelper->getArgs());
                    $resources = $resources->have_posts() ? $resources->get_posts() : false;

                    if ($resources) {
                        foreach ($resources as &$resource) {
                            /** @var int $resource */
                            $resource = new Resource($resource);
                            /** @var Resource $resource */

                            if (($resource->getFields()->getThumbnail() instanceof Media)) {
                                $resource->getFields()->getThumbnail()->setCrop(Theme::IMAGE_SIZES['highlighted_resources_list']['name']);
                            }
                        }
                    }
                }
            }

            $this->setResources($resources);
        }

        return $this->resources;
    }

    /**
     * @param false|Resource[] $resources
     * @return HighlightedResourcesList
     */
    public function setResources($resources)
    {
        $this->resources = $resources;
        return $this;
    }

    /**
     * @return HighlightedResourcesListFields
     */
    public function getFields(): HighlightedResourcesListFields
    {
        return $this->fields;
    }

    /**
     * @param HighlightedResourcesListFields $fields
     * @return $this
     */
    protected function setFields(HighlightedResourcesListFields $fields): self
    {
        $this->fields = $fields;

        return $this;
    }
}