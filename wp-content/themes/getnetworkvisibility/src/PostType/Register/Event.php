<?php

namespace FINNPartners\Theme\PostType\Register;

use FINNPartners\Theme\Taxonomy\Region;
use FINNPartners\Theme\Theme;
use WpAdvanceCustomFieldsExtend\AbstractClass\RegisterPostType;
use FINNPartners\Theme\Api\Event as EventApi;

class Event extends RegisterPostType
{
    const POST_TYPE = 'event';

    const SINGULAR_NAME = 'Event';
    const PLURAL_NAME = 'Events';

    const ICON = 'dashicons-shield';

    const TAXONOMIES = [
        Region::TAXONOMY_NAME,
    ];

    /**
     * @param string $postType
     * @param string $class
     * @return Event
     */
    public static function getInstance(string $postType = self::POST_TYPE, string $class = Event::class): Event
    {
        return parent::getInstance($postType, $class); // TODO: Change the autogenerated stub
    }

    public function __construct(string $postType)
    {
        parent::__construct($postType);

        $labels = new \stdClass;
        $labels->name = self::PLURAL_NAME;
        $labels->singular_name = self::SINGULAR_NAME;
        $labels->add_new_item = __("Add New " . self::SINGULAR_NAME, Theme::DOMAIN);
        $labels->new_item_name = __("New " . self::SINGULAR_NAME, Theme::DOMAIN);
        $labels->edit_item = __("Edit " . self::SINGULAR_NAME, Theme::DOMAIN);
        $labels->update_item = __("Update " . self::SINGULAR_NAME, Theme::DOMAIN);
        $labels->search_items = __("Search " . self::SINGULAR_NAME, Theme::DOMAIN);
        $labels->popular_items = __("Popular " . self::PLURAL_NAME, Theme::DOMAIN);
        $labels->all_items = __("All " . self::PLURAL_NAME, Theme::DOMAIN);
        $labels->add_or_remove_items = __("Add or remove " . self::PLURAL_NAME, Theme::DOMAIN);
        $labels->separate_items_with_commas = __("Separate " . self::PLURAL_NAME . " with commas", Theme::DOMAIN);
        $labels->choose_from_most_used = __("All " . self::PLURAL_NAME, Theme::DOMAIN);
        $labels->front = self::PLURAL_NAME;
        $labels->detail = self::SINGULAR_NAME;
        $labels->detail_plural = self::PLURAL_NAME;

        $this->setLabel(self::PLURAL_NAME)
            ->setLabels($labels)
            ->setPublic(true)
            ->setHasArchive(false)
            ->setSupports(['title', 'thumbnail', 'editor', 'excerpt', 'revisions', 'page-attributes'])
            ->setQueryVar(true)
            ->setMenuIcon(self::ICON)
            ->setHierarchical(true)
            ->setShowInRest(true)
            ->setRestBase(self::POST_TYPE)
            ->setHierarchical(false)
            ->register();

        add_filter('get_query_var', [$this, 'getQueryVars']);
    }

    public function getQueryVars($queryVar)
    {
        $queryVar[] = EventApi::FILTER_TYPE_VAR;

        return $queryVar;
    }

    /**
     * @return void
     */
    public function p2pInit(): void
    {
        p2p_register_connection_type([
            'name' => self::POST_TYPE . '_to_post',
            'from' => self::POST_TYPE,
            'to' => 'post',
            'sortable' => 'to',
            'reciprocal' => true
        ]);
    }
}
